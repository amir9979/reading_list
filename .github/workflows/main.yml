name: Issue Commenter

on:
  issues:
    types: [opened]

jobs:
  comment-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Execute Python script on issue content
        id: process_issue
        run: |
          echo "${{ github.event.issue.body }}" > input.txt
          cat input.txt
          python .github/scripts/process_issue.py > output.txt
          echo "::set-output name=result::$(<output.txt)"

      - name: Execute Python script on issue content
        id: py
        shell: python
        run: |
           import json
           from pathlib import Path
           def parse_email_content(email_content):
              start = " __\n         \n         ### \n         \n         ###"
              sep = "---|---|---|---"
              save_sep = "[![Save]"
              initial_sep = '### '
              link_start_sep = 'https://scholar.google.co.uk/scholar_url?url='
              link_end_sep = '&hl=en'
          
              papers = [x.split(save_sep)[0] for x in email_content.split(start)[1].split(sep)][:-1]
              papers = [p.split(initial_sep)[1] for p in papers]
              relevant_info = []
              for paper in papers:
                  clear_lines = [l.strip() for l in paper.splitlines() if l.strip()]
                  title, fulllink = (clear_lines[0].split(' [')[1] if ' [' in clear_lines[0] else clear_lines[0].replace('[', '')).split('](')
                  link = fulllink.split(link_end_sep)[0].split(link_start_sep)[1]
                  details = clear_lines[1]
                  authors = [a.strip() for a in details.split('-')[0].split(',')]
                  venue, year = details.split('-')[1].split(',')
                  abstract = ' '.join(clear_lines[2:])
                  relevant_info.append({
                      'title': title,
                      'link': link,
                      'authors': authors,
                      'venue': venue.strip(),
                      'year': year.strip(),
                      'abstract': abstract.strip()
                  })
          
              return relevant_info
          

      - name: Comment on the issue
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issueComment = ${{ steps.process_issue.outputs.result }}
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: issueComment,
            })
